---
# tasks file for nextcloud

- name: "Load os specific variables"
  ansible.builtin.include_tasks: ./setup_env.yml
  tags:
    - install_apps

- name: "Install PHP packages"
  ansible.builtin.include_tasks: php_install.yml
  when: nextcloud_install_websrv
  tags:
    - install_apps

- name: Install web server packages
  when: nextcloud_install_websrv
  ansible.builtin.include_tasks: ./websrv_install.yml

- name: Install certificates
  when: nextcloud_install_tls
  block:
    - name: Verify permission for installed TLS certificates
      ansible.builtin.include_tasks: ./tls_installed.yml
      when: nextcloud_tls_cert_method == "installed"

    - name: Install given signed certificates
      ansible.builtin.include_tasks: ./tls_signed.yml
      when: nextcloud_tls_cert_method == "signed"

    - name: Configure self signed TLS certificates
      ansible.builtin.include_tasks: ./tls_selfsigned.yml
      when: nextcloud_tls_cert_method == "self-signed"

- name: Configure web server
  when: nextcloud_install_websrv
  block:
    - name: Configure Nginx web server.
      ansible.builtin.include_tasks: ./http_nginx.yml
      when: nextcloud_websrv in ["nginx"]

    - name: Configure Apache web server
      ansible.builtin.include_tasks: ./http_apache.yml
      when: nextcloud_websrv in ["apache2"]

- name: Configure Redis server
  ansible.builtin.include_tasks: ./redis_server.yml
  when: (nextcloud_install_redis_server | bool)

- name: Configure DB
  when: nextcloud_install_db
  block:
    - name: Configure mysql/mariadb database
      ansible.builtin.include_tasks: ./db_mysql.yml
      when: nextcloud_db_backend in ["mysql", "mariadb"]

    - name: Configure PostgreSQL database
      ansible.builtin.include_tasks: ./db_postgresql.yml
      when: nextcloud_db_backend in ["pgsql"]

- name: Check Nextcloud installed
  ansible.builtin.stat:
    path: "{{ nextcloud_webroot }}/index.php"
  register: nc_nextcloud_installed

- name: Downloading Nextcloud
  ansible.builtin.include_tasks: ./nc_download.yml
  when: (not nc_nextcloud_installed.stat.exists) and nextcloud_install_websrv

- name: Check Nextcloud configuration exists.
  ansible.builtin.stat:
    path: "{{ nextcloud_webroot }}/config/config.php"
  register: nc_nextcloud_conf

- name: Check Nextcloud is configured
  ansible.builtin.command: grep -q "{{ nextcloud_trusted_domain | first }}" {{ nextcloud_webroot }}/config/config.php
  failed_when: false
  changed_when: false
  register: nc_nextcloud_configured
  when: nc_nextcloud_conf.stat.exists

- name: Nextcloud installation
  ansible.builtin.include_tasks: ./nc_installation.yml
  when: |
    ((not nc_nextcloud_conf.stat.exists)  or
    (nc_nextcloud_configured.rc is defined and nc_nextcloud_configured.rc != 0)) and nextcloud_install_websrv

- name: Install Nextcloud Apps
  when:
    - nextcloud_apps is defined
    - nextcloud_apps is mapping
    - nextcloud_install_websrv
  tags:
    - install_apps
    - patch_user_saml_app
  block:
    - name: "[NC apps] - lists the number of apps available in the instance."
      ansible.builtin.command: php occ app:list --output=json_pretty --no-warnings
      args:
        chdir: "{{ nextcloud_webroot }}"
      become_user: "{{ nextcloud_websrv_user }}"
      become: true
      become_flags: "{{ ansible_become_flags | default(omit) }}"
      changed_when: false
      check_mode: false
      register: nc_apps_list

    - name: "[NC apps] - convert list to yaml."
      ansible.builtin.set_fact:
        nc_available_apps: "{{ nc_apps_list.stdout | from_json }}"

    - name: "[NC apps] - installation."
      ansible.builtin.include_tasks: ./nc_apps.yml
      # do if the app is not enabled and ( (archive path is not "") or (app is disabled) )
      when:
        - item.key not in nc_available_apps.enabled
        - ansible_run_tags is not search('patch_user_saml_app')
      with_dict: "{{ nextcloud_apps }}"


- name: Add indices
  ansible.builtin.command: php occ db:add-missing-indices
  args:
    chdir: "{{ nextcloud_webroot }}"
  become_user: "{{ nextcloud_websrv_user }}"
  become: true
  become_flags: "{{ ansible_become_flags | default(omit) }}"
  register: nc_indices_cmd
  changed_when: '"Done" not in nc_indices_cmd.stdout'
  when: nextcloud_install_websrv
    #when: nextcloud_install_db

- name: "[Main] - Patch from the app 'user_saml' the file SAMLController.php."
  when:
    - nextcloud_patch_user_saml_app
    - nc_available_apps.enabled['user_saml'] is defined or nc_available_apps.disabled['user_saml'] is defined
    - nextcloud_install_websrv
  tags:
    - patch_user_saml_app
  vars:
    pattern: '.*\$this->session->set\(.user_saml\.samlUserData.,\s+\$_SERVER\);.*'
    file2patch: "{{ nextcloud_webroot + 'apps/user_saml/lib/Controller/SAMLController.php' }}"
  block:
    - name: "[Main] - Check if SAMLController.php can be patched."
      ansible.builtin.slurp:
        src: "{{ file2patch }}"
      register: df_file

    - name: "[Main] - Patch file SAMController.php."
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.file', 'files/SAMLController.patch') }}"
        path: "{{ file2patch }}"
        insertbefore: "{{ pattern }}"
        marker: "                                /** {mark} ANSIBLE MANAGED BLOCK */"
      when: df_file.content | b64decode | regex_search(pattern)
      
- name: Configure Reverse Proxy
  when: nextcloud_install_reverseproxy
  block:
    - name: Configure Nginx reverse proxy.
      ansible.builtin.include_tasks: ./reverseproxy_nginx.yml
      when: nextcloud_websrv in ["nginx"]
#    - name: Configure Apache reverse proxy.
#      ansible.builtin.include_tasks: ./reverseproxy_apache.yml
#      when: nextcloud_websrv in ["apache2"]
